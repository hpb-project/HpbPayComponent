package io.hpb.pay.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import io.hpb.web3.abi.EventEncoder;
import io.hpb.web3.abi.TypeReference;
import io.hpb.web3.abi.datatypes.Address;
import io.hpb.web3.abi.datatypes.DynamicArray;
import io.hpb.web3.abi.datatypes.Event;
import io.hpb.web3.abi.datatypes.Function;
import io.hpb.web3.abi.datatypes.Type;
import io.hpb.web3.abi.datatypes.Utf8String;
import io.hpb.web3.abi.datatypes.generated.Uint256;
import io.hpb.web3.abi.datatypes.generated.Uint8;
import io.hpb.web3.crypto.Credentials;
import io.hpb.web3.protocol.Web3;
import io.hpb.web3.protocol.core.DefaultBlockParameter;
import io.hpb.web3.protocol.core.RemoteCall;
import io.hpb.web3.protocol.core.methods.request.HpbFilter;
import io.hpb.web3.protocol.core.methods.response.Log;
import io.hpb.web3.protocol.core.methods.response.TransactionReceipt;
import io.hpb.web3.tuples.generated.Tuple7;
import io.hpb.web3.tx.Contract;
import io.hpb.web3.tx.RawTransactionManager;
import io.hpb.web3.tx.TransactionManager;
import io.hpb.web3.tx.gas.ContractGasProvider;
import io.hpb.web3.tx.gas.StaticGasProvider;
import rx.Observable;
import rx.functions.Func1;

@SuppressWarnings({"rawtypes"})
public class HpbPay extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_FETCHCREATEDORDERSFORPAYER = "fetchCreatedOrdersForPayer";

    public static final String FUNC_FETCHCANCELLEDORDERSFORMERCHANT = "fetchCancelledOrdersForMerchant";

    public static final String FUNC_UPDATEMERCHANT = "updateMerchant";

    public static final String FUNC_GENERATEORDERWITHPAYEEBYADMIN = "generateOrderWithPayeeByAdmin";

    public static final String FUNC_FETCHCREATEDORDERSFORPAYERBYADMIN = "fetchCreatedOrdersForPayerByAdmin";

    public static final String FUNC_FETCHORDERBYIDWITHMERCHANT = "fetchOrderByIdWithMerchant";

    public static final String FUNC_FETCHORDERSFORPAYER = "fetchOrdersForPayer";

    public static final String FUNC_MERCHANTSINDEXMAP = "merchantsIndexMap";

    public static final String FUNC_FETCHPAIDORDERSFORMERCHANT = "fetchPaidOrdersForMerchant";

    public static final String FUNC_DELETEADMIN = "deleteAdmin";

    public static final String FUNC_FETCHCREATEDORDERSFORMERCHANT = "fetchCreatedOrdersForMerchant";

    public static final String FUNC_FETCHORDERBYIDWITHPAYER = "fetchOrderByIdWithPayer";

    public static final String FUNC_CANCELORDERWITHPAYERBYADMIN = "cancelOrderWithPayerByAdmin";

    public static final String FUNC_CANCELORDERWITHMERCHANTBYADMIN = "cancelOrderWithMerchantByAdmin";

    public static final String FUNC_CANCELORDERBYPAYER = "cancelOrderByPayer";

    public static final String FUNC_GENERATEORDERBYADMIN = "generateOrderByAdmin";

    public static final String FUNC_GETMERCHANTPUBLICKEY = "getMerchantPublicKey";

    public static final String FUNC_FETCHORDERBYIDWITHMERCHANTBYADMIN = "fetchOrderByIdWithMerchantByAdmin";

    public static final String FUNC_ADDADMIN = "addAdmin";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_FETCHPAIDORDERSFORMERCHANTBYADMIN = "fetchPaidOrdersForMerchantByAdmin";

    public static final String FUNC_GENERATEORDERBYMERCHANTWITHPAYEE = "generateOrderByMerchantWithPayee";

    public static final String FUNC_FETCHCANCELLEDORDERSFORPAYERBYADMIN = "fetchCancelledOrdersForPayerByAdmin";

    public static final String FUNC_FETCHORDERSFORMERCHANT = "fetchOrdersForMerchant";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_FETCHALLCREATEDORDERS = "fetchAllCreatedOrders";

    public static final String FUNC_PAYORDER = "payOrder";

    public static final String FUNC_FETCHCANCELLEDORDERSFORPAYER = "fetchCancelledOrdersForPayer";

    public static final String FUNC_FETCHORDERSFORMERCHANTBYADMIN = "fetchOrdersForMerchantByAdmin";

    public static final String FUNC_FETCHORDERBYORDERINDEX = "fetchOrderByOrderIndex";

    public static final String FUNC_ADDMERCHANT = "addMerchant";

    public static final String FUNC_FETCHORDERBYIDWITHPAYERBYADMIN = "fetchOrderByIdWithPayerByAdmin";

    public static final String FUNC_PAYERSINDEXMAP = "payersIndexMap";

    public static final String FUNC_CANCELORDERBYMERCHANT = "cancelOrderByMerchant";

    public static final String FUNC_FETCHORDERSFORPAYERBYADMIN = "fetchOrdersForPayerByAdmin";

    public static final String FUNC_FETCHPAIDORDERSFORPAYERBYADMIN = "fetchPaidOrdersForPayerByAdmin";

    public static final String FUNC_GETMERCHANTPUBLICKEYBYADMIN = "getMerchantPublicKeyByAdmin";

    public static final String FUNC_UPDATEMERCHANTBYADMIN = "updateMerchantByAdmin";

    public static final String FUNC_GENERATEORDERBYMERCHANT = "generateOrderByMerchant";

    public static final String FUNC_FETCHPAIDORDERSFORPAYER = "fetchPaidOrdersForPayer";

    public static final String FUNC_FETCHCANCELLEDORDERSFORMERCHANTBYADMIN = "fetchCancelledOrdersForMerchantByAdmin";

    public static final String FUNC_ADMINMAP = "adminMap";

    public static final String FUNC_FETCHCREATEDORDERSFORMERCHANTBYADMIN = "fetchCreatedOrdersForMerchantByAdmin";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event OWNERSHIPRENOUNCED_EVENT = new Event("OwnershipRenounced", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event RECEIVEDHPB_EVENT = new Event("ReceivedHpb", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event GENERATEORDER_EVENT = new Event("GenerateOrder", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event PAYORDER_EVENT = new Event("PayOrder", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event CANCELORDER_EVENT = new Event("CancelOrder", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected HpbPay(String contractAddress, Web3 web3, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3, new RawTransactionManager(web3, credentials),new StaticGasProvider(gasPrice, gasLimit));
    }

    protected HpbPay(String contractAddress, Web3 web3, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3, transactionManager, new StaticGasProvider(gasPrice, gasLimit));
    }
    
    protected HpbPay(String contractAddress,Web3 web3, TransactionManager transactionManager,
            ContractGasProvider gasProvider) {
    	super(BINARY, contractAddress, web3, transactionManager, gasProvider);
    }

    public RemoteCall<DynamicArray<Uint256>> fetchCreatedOrdersForPayer() {
        final Function function = new Function(FUNC_FETCHCREATEDORDERSFORPAYER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Uint256>> fetchCancelledOrdersForMerchant() {
        final Function function = new Function(FUNC_FETCHCANCELLEDORDERSFORMERCHANT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> updateMerchant(Utf8String _publicKey, Utf8String _desc) {
        final Function function = new Function(
                FUNC_UPDATEMERCHANT, 
                Arrays.<Type>asList(_publicKey, _desc), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> generateOrderWithPayeeByAdmin(Address _merchantAddr,
            Address _from, Address _to, Uint256 _value, Utf8String _orderId, Utf8String _backUrl,
            Utf8String _desc) {
        final Function function = new Function(
                FUNC_GENERATEORDERWITHPAYEEBYADMIN, 
                Arrays.<Type>asList(_merchantAddr, _from, _to, _value, _orderId, _backUrl, _desc), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Uint256>> fetchCreatedOrdersForPayerByAdmin(Address _payerAddr) {
        final Function function = new Function(FUNC_FETCHCREATEDORDERSFORPAYERBYADMIN, 
                Arrays.<Type>asList(_payerAddr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple7<Address, Address, Uint256, Uint8, Utf8String, Utf8String, Utf8String>> fetchOrderByIdWithMerchant(Utf8String orderId) {
        final Function function = new Function(FUNC_FETCHORDERBYIDWITHMERCHANT, 
                Arrays.<Type>asList(orderId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple7<Address, Address, Uint256, Uint8, Utf8String, Utf8String, Utf8String>>(
                new Callable<Tuple7<Address, Address, Uint256, Uint8, Utf8String, Utf8String, Utf8String>>() {
                    @Override
                    public Tuple7<Address, Address, Uint256, Uint8, Utf8String, Utf8String, Utf8String> call()
                            throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<Address, Address, Uint256, Uint8, Utf8String, Utf8String, Utf8String>(
                                (Address) results.get(0), 
                                (Address) results.get(1), 
                                (Uint256) results.get(2), 
                                (Uint8) results.get(3), 
                                (Utf8String) results.get(4), 
                                (Utf8String) results.get(5), 
                                (Utf8String) results.get(6));
                    }
                });
    }

    public RemoteCall<DynamicArray<Uint256>> fetchOrdersForPayer() {
        final Function function = new Function(FUNC_FETCHORDERSFORPAYER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> merchantsIndexMap(Address param0) {
        final Function function = new Function(FUNC_MERCHANTSINDEXMAP, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Uint256>> fetchPaidOrdersForMerchant() {
        final Function function = new Function(FUNC_FETCHPAIDORDERSFORMERCHANT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> deleteAdmin(Address addr) {
        final Function function = new Function(
                FUNC_DELETEADMIN, 
                Arrays.<Type>asList(addr), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Uint256>> fetchCreatedOrdersForMerchant() {
        final Function function = new Function(FUNC_FETCHCREATEDORDERSFORMERCHANT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple7<Address, Address, Uint256, Uint8, Utf8String, Utf8String, Utf8String>> fetchOrderByIdWithPayer(Utf8String orderId) {
        final Function function = new Function(FUNC_FETCHORDERBYIDWITHPAYER, 
                Arrays.<Type>asList(orderId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple7<Address, Address, Uint256, Uint8, Utf8String, Utf8String, Utf8String>>(
                new Callable<Tuple7<Address, Address, Uint256, Uint8, Utf8String, Utf8String, Utf8String>>() {
                    @Override
                    public Tuple7<Address, Address, Uint256, Uint8, Utf8String, Utf8String, Utf8String> call()
                            throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<Address, Address, Uint256, Uint8, Utf8String, Utf8String, Utf8String>(
                                (Address) results.get(0), 
                                (Address) results.get(1), 
                                (Uint256) results.get(2), 
                                (Uint8) results.get(3), 
                                (Utf8String) results.get(4), 
                                (Utf8String) results.get(5), 
                                (Utf8String) results.get(6));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> cancelOrderWithPayerByAdmin(Utf8String _orderId,
            Address _payerAddr) {
        final Function function = new Function(
                FUNC_CANCELORDERWITHPAYERBYADMIN, 
                Arrays.<Type>asList(_orderId, _payerAddr), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> cancelOrderWithMerchantByAdmin(Utf8String _orderId,
            Address _merchantAddr) {
        final Function function = new Function(
                FUNC_CANCELORDERWITHMERCHANTBYADMIN, 
                Arrays.<Type>asList(_orderId, _merchantAddr), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> cancelOrderByPayer(Utf8String _orderId) {
        final Function function = new Function(
                FUNC_CANCELORDERBYPAYER, 
                Arrays.<Type>asList(_orderId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> generateOrderByAdmin(Address _merchantAddr, Address _from,
            Uint256 _value, Utf8String _orderId, Utf8String _backUrl, Utf8String _desc) {
        final Function function = new Function(
                FUNC_GENERATEORDERBYADMIN, 
                Arrays.<Type>asList(_merchantAddr, _from, _value, _orderId, _backUrl, _desc), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Utf8String> getMerchantPublicKey() {
        final Function function = new Function(FUNC_GETMERCHANTPUBLICKEY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple7<Address, Address, Uint256, Uint8, Utf8String, Utf8String, Utf8String>> fetchOrderByIdWithMerchantByAdmin(Utf8String orderId,
            Address merchantAddr) {
        final Function function = new Function(FUNC_FETCHORDERBYIDWITHMERCHANTBYADMIN, 
                Arrays.<Type>asList(orderId, merchantAddr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple7<Address, Address, Uint256, Uint8, Utf8String, Utf8String, Utf8String>>(
                new Callable<Tuple7<Address, Address, Uint256, Uint8, Utf8String, Utf8String, Utf8String>>() {
                    @Override
                    public Tuple7<Address, Address, Uint256, Uint8, Utf8String, Utf8String, Utf8String> call()
                            throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<Address, Address, Uint256, Uint8, Utf8String, Utf8String, Utf8String>(
                                (Address) results.get(0), 
                                (Address) results.get(1), 
                                (Uint256) results.get(2), 
                                (Uint8) results.get(3), 
                                (Utf8String) results.get(4), 
                                (Utf8String) results.get(5), 
                                (Utf8String) results.get(6));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addAdmin(Address addr) {
        final Function function = new Function(
                FUNC_ADDADMIN, 
                Arrays.<Type>asList(addr), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Uint256>> fetchPaidOrdersForMerchantByAdmin(Address _merchantAddr) {
        final Function function = new Function(FUNC_FETCHPAIDORDERSFORMERCHANTBYADMIN, 
                Arrays.<Type>asList(_merchantAddr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> generateOrderByMerchantWithPayee(Address _from,
            Address _to, Uint256 _value, Utf8String _orderId, Utf8String _backUrl,
            Utf8String _desc) {
        final Function function = new Function(
                FUNC_GENERATEORDERBYMERCHANTWITHPAYEE, 
                Arrays.<Type>asList(_from, _to, _value, _orderId, _backUrl, _desc), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Uint256>> fetchCancelledOrdersForPayerByAdmin(Address _payerAddr) {
        final Function function = new Function(FUNC_FETCHCANCELLEDORDERSFORPAYERBYADMIN, 
                Arrays.<Type>asList(_payerAddr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Uint256>> fetchOrdersForMerchant() {
        final Function function = new Function(FUNC_FETCHORDERSFORMERCHANT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Address> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Uint256>> fetchAllCreatedOrders() {
        final Function function = new Function(FUNC_FETCHALLCREATEDORDERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> payOrder(Utf8String _orderId) {
        final Function function = new Function(
                FUNC_PAYORDER, 
                Arrays.<Type>asList(_orderId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Uint256>> fetchCancelledOrdersForPayer() {
        final Function function = new Function(FUNC_FETCHCANCELLEDORDERSFORPAYER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Uint256>> fetchOrdersForMerchantByAdmin(Address _merchantAddr) {
        final Function function = new Function(FUNC_FETCHORDERSFORMERCHANTBYADMIN, 
                Arrays.<Type>asList(_merchantAddr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple7<Address, Address, Uint256, Uint8, Utf8String, Utf8String, Utf8String>> fetchOrderByOrderIndex(Uint256 _orderIndex) {
        final Function function = new Function(FUNC_FETCHORDERBYORDERINDEX, 
                Arrays.<Type>asList(_orderIndex), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple7<Address, Address, Uint256, Uint8, Utf8String, Utf8String, Utf8String>>(
                new Callable<Tuple7<Address, Address, Uint256, Uint8, Utf8String, Utf8String, Utf8String>>() {
                    @Override
                    public Tuple7<Address, Address, Uint256, Uint8, Utf8String, Utf8String, Utf8String> call()
                            throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<Address, Address, Uint256, Uint8, Utf8String, Utf8String, Utf8String>(
                                (Address) results.get(0), 
                                (Address) results.get(1), 
                                (Uint256) results.get(2), 
                                (Uint8) results.get(3), 
                                (Utf8String) results.get(4), 
                                (Utf8String) results.get(5), 
                                (Utf8String) results.get(6));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addMerchant(Address _merchantAddr, Utf8String _publicKey,
            Utf8String _desc) {
        final Function function = new Function(
                FUNC_ADDMERCHANT, 
                Arrays.<Type>asList(_merchantAddr, _publicKey, _desc), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple7<Address, Address, Uint256, Uint8, Utf8String, Utf8String, Utf8String>> fetchOrderByIdWithPayerByAdmin(Utf8String orderId,
            Address payerAddr) {
        final Function function = new Function(FUNC_FETCHORDERBYIDWITHPAYERBYADMIN, 
                Arrays.<Type>asList(orderId, payerAddr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple7<Address, Address, Uint256, Uint8, Utf8String, Utf8String, Utf8String>>(
                new Callable<Tuple7<Address, Address, Uint256, Uint8, Utf8String, Utf8String, Utf8String>>() {
                    @Override
                    public Tuple7<Address, Address, Uint256, Uint8, Utf8String, Utf8String, Utf8String> call()
                            throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<Address, Address, Uint256, Uint8, Utf8String, Utf8String, Utf8String>(
                                (Address) results.get(0), 
                                (Address) results.get(1), 
                                (Uint256) results.get(2), 
                                (Uint8) results.get(3), 
                                (Utf8String) results.get(4), 
                                (Utf8String) results.get(5), 
                                (Utf8String) results.get(6));
                    }
                });
    }

    public RemoteCall<Uint256> payersIndexMap(Address param0) {
        final Function function = new Function(FUNC_PAYERSINDEXMAP, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> cancelOrderByMerchant(Utf8String _orderId) {
        final Function function = new Function(
                FUNC_CANCELORDERBYMERCHANT, 
                Arrays.<Type>asList(_orderId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Uint256>> fetchOrdersForPayerByAdmin(Address _payerAddr) {
        final Function function = new Function(FUNC_FETCHORDERSFORPAYERBYADMIN, 
                Arrays.<Type>asList(_payerAddr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Uint256>> fetchPaidOrdersForPayerByAdmin(Address _payerAddr) {
        final Function function = new Function(FUNC_FETCHPAIDORDERSFORPAYERBYADMIN, 
                Arrays.<Type>asList(_payerAddr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Utf8String> getMerchantPublicKeyByAdmin(Address _merchantAddr) {
        final Function function = new Function(FUNC_GETMERCHANTPUBLICKEYBYADMIN, 
                Arrays.<Type>asList(_merchantAddr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> updateMerchantByAdmin(Address _merchantAddr,
            Utf8String _publicKey, Utf8String _desc) {
        final Function function = new Function(
                FUNC_UPDATEMERCHANTBYADMIN, 
                Arrays.<Type>asList(_merchantAddr, _publicKey, _desc), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> generateOrderByMerchant(Address _from, Uint256 _value,
            Utf8String _orderId, Utf8String _backUrl, Utf8String _desc) {
        final Function function = new Function(
                FUNC_GENERATEORDERBYMERCHANT, 
                Arrays.<Type>asList(_from, _value, _orderId, _backUrl, _desc), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Uint256>> fetchPaidOrdersForPayer() {
        final Function function = new Function(FUNC_FETCHPAIDORDERSFORPAYER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Uint256>> fetchCancelledOrdersForMerchantByAdmin(Address _merchantAddr) {
        final Function function = new Function(FUNC_FETCHCANCELLEDORDERSFORMERCHANTBYADMIN, 
                Arrays.<Type>asList(_merchantAddr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Address> adminMap(Address param0) {
        final Function function = new Function(FUNC_ADMINMAP, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Uint256>> fetchCreatedOrdersForMerchantByAdmin(Address _merchantAddr) {
        final Function function = new Function(FUNC_FETCHCREATEDORDERSFORMERCHANTBYADMIN, 
                Arrays.<Type>asList(_merchantAddr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(Address _newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(_newOwner), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<HpbPay> deploy(Web3 web3, Credentials credentials, BigInteger gasPrice,
            BigInteger gasLimit) {
        return deployRemoteCall(HpbPay.class, web3, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<HpbPay> deploy(Web3 web3, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(HpbPay.class, web3, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public List<OwnershipRenouncedEventResponse> getOwnershipRenouncedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, transactionReceipt);
        ArrayList<OwnershipRenouncedEventResponse> responses = new ArrayList<OwnershipRenouncedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, OwnershipRenouncedEventResponse>() {
            @Override
            public OwnershipRenouncedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, log);
                OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPRENOUNCED_EVENT));
        return ownershipRenouncedEventObservable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventObservable(filter);
    }

    public List<ReceivedHpbEventResponse> getReceivedHpbEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RECEIVEDHPB_EVENT, transactionReceipt);
        ArrayList<ReceivedHpbEventResponse> responses = new ArrayList<ReceivedHpbEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReceivedHpbEventResponse typedResponse = new ReceivedHpbEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ReceivedHpbEventResponse> receivedHpbEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, ReceivedHpbEventResponse>() {
            @Override
            public ReceivedHpbEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RECEIVEDHPB_EVENT, log);
                ReceivedHpbEventResponse typedResponse = new ReceivedHpbEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Observable<ReceivedHpbEventResponse> receivedHpbEventObservable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RECEIVEDHPB_EVENT));
        return receivedHpbEventObservable(filter);
    }

    public List<GenerateOrderEventResponse> getGenerateOrderEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(GENERATEORDER_EVENT, transactionReceipt);
        ArrayList<GenerateOrderEventResponse> responses = new ArrayList<GenerateOrderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GenerateOrderEventResponse typedResponse = new GenerateOrderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.orderId = (Utf8String) eventValues.getIndexedValues().get(2);
            typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
            typedResponse.backUrl = (Utf8String) eventValues.getNonIndexedValues().get(1);
            typedResponse.desc = (Utf8String) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<GenerateOrderEventResponse> generateOrderEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, GenerateOrderEventResponse>() {
            @Override
            public GenerateOrderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(GENERATEORDER_EVENT, log);
                GenerateOrderEventResponse typedResponse = new GenerateOrderEventResponse();
                typedResponse.log = log;
                typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.orderId = (Utf8String) eventValues.getIndexedValues().get(2);
                typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
                typedResponse.backUrl = (Utf8String) eventValues.getNonIndexedValues().get(1);
                typedResponse.desc = (Utf8String) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Observable<GenerateOrderEventResponse> generateOrderEventObservable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GENERATEORDER_EVENT));
        return generateOrderEventObservable(filter);
    }

    public List<PayOrderEventResponse> getPayOrderEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAYORDER_EVENT, transactionReceipt);
        ArrayList<PayOrderEventResponse> responses = new ArrayList<PayOrderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PayOrderEventResponse typedResponse = new PayOrderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.orderId = (Utf8String) eventValues.getIndexedValues().get(2);
            typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
            typedResponse.backUrl = (Utf8String) eventValues.getNonIndexedValues().get(1);
            typedResponse.desc = (Utf8String) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<PayOrderEventResponse> payOrderEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, PayOrderEventResponse>() {
            @Override
            public PayOrderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PAYORDER_EVENT, log);
                PayOrderEventResponse typedResponse = new PayOrderEventResponse();
                typedResponse.log = log;
                typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.orderId = (Utf8String) eventValues.getIndexedValues().get(2);
                typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
                typedResponse.backUrl = (Utf8String) eventValues.getNonIndexedValues().get(1);
                typedResponse.desc = (Utf8String) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Observable<PayOrderEventResponse> payOrderEventObservable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAYORDER_EVENT));
        return payOrderEventObservable(filter);
    }

    public List<CancelOrderEventResponse> getCancelOrderEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CANCELORDER_EVENT, transactionReceipt);
        ArrayList<CancelOrderEventResponse> responses = new ArrayList<CancelOrderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CancelOrderEventResponse typedResponse = new CancelOrderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.orderId = (Utf8String) eventValues.getIndexedValues().get(2);
            typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
            typedResponse.backUrl = (Utf8String) eventValues.getNonIndexedValues().get(1);
            typedResponse.desc = (Utf8String) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CancelOrderEventResponse> cancelOrderEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, CancelOrderEventResponse>() {
            @Override
            public CancelOrderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CANCELORDER_EVENT, log);
                CancelOrderEventResponse typedResponse = new CancelOrderEventResponse();
                typedResponse.log = log;
                typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.orderId = (Utf8String) eventValues.getIndexedValues().get(2);
                typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
                typedResponse.backUrl = (Utf8String) eventValues.getNonIndexedValues().get(1);
                typedResponse.desc = (Utf8String) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Observable<CancelOrderEventResponse> cancelOrderEventObservable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CANCELORDER_EVENT));
        return cancelOrderEventObservable(filter);
    }

    public static HpbPay load(String contractAddress, Web3 web3, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new HpbPay(contractAddress, web3, credentials, gasPrice, gasLimit);
    }

    public static HpbPay load(String contractAddress, Web3 web3,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new HpbPay(contractAddress, web3, transactionManager, gasPrice, gasLimit);
    }

    public static class OwnershipRenouncedEventResponse {
        public Log log;

        public Address previousOwner;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public Address previousOwner;

        public Address newOwner;
    }

    public static class ReceivedHpbEventResponse {
        public Log log;

        public Address sender;

        public Uint256 amount;
    }

    public static class GenerateOrderEventResponse {
        public Log log;

        public Address from;

        public Address to;

        public Utf8String orderId;

        public Uint256 value;

        public Utf8String backUrl;

        public Utf8String desc;
    }

    public static class PayOrderEventResponse {
        public Log log;

        public Address from;

        public Address to;

        public Utf8String orderId;

        public Uint256 value;

        public Utf8String backUrl;

        public Utf8String desc;
    }

    public static class CancelOrderEventResponse {
        public Log log;

        public Address from;

        public Address to;

        public Utf8String orderId;

        public Uint256 value;

        public Utf8String backUrl;

        public Utf8String desc;
    }
}
